#include "sdspi.h"

#define MEM_WORD        3'b010
#define MEM_HALFWORD    3'b001
#define MEM_BYTE        3'b000

/*
	CRC : x^7 + x^3 + 1
	CRC must be valid in MMC mode, and can be used in SPI mode.
	We shall hardcode CRC in command token and never use in SPI mode.
*/

/* 
	Command Token 
	struct command_token_t {
		command[8];	
		arguments[32];
		crc[8];
	};
	Master sends command in this format to the slave, slave returns response in the format(described later).
	Each commands comprised of 1 byte command, 4 bytes argument and 1 byte CRC, 6 bytes in total.
	Command can take argument on some command type.
	CRC check are always done in MMC mode so must be valid.
*/
/* 
	Command response 
	There are some types of command responses(such as R1, R2, R3), and slave responds with one of types determined by commands master sends.
	Command response always start with `0`.

	* R1 Format. (1 byte)
		also used as header of command responses R2, R3
	struct response_1_t {
		x[1];
		in_idle_state[1];
		erase_reset[1];
		illegal_command[1];
		communication_crc_error[1];
		erase_sequence_error[1];
		address_error[1];
		parameter_error[1];
	};

	* R2 Format. (2 bytes)
		Used as response of accessing status register.
	struct response_2_t {
		struct response_1_t R1;
		value_of_status_register[8];
	};

	* R3 Format. (5 bytes)
		Used as response of accessing OCR register.
	struct response_2_t {
		struct response_1_t R1;
		OCR[32];
	};
	
	* R7 Format. (5 bytes)
	struct response_7_t {
		struct response_1_t R1;
		commnad_version[4];
		reserved_bits[16];
		voltage_accepted[4];
		check_pattern[8];
	}
*/

/* 
	Data token
*/

/*
	Data response
*/

/* 
	Commands
*/

/* 
	Initialization procedure(for SDHC compatible Card)
	---
	0. Supply power line below 0.5V for 1ms, wait until it become stable supply voltage.
	1. Wait 1ms. (power supplyed with stable supply voltage)
	2. Set clock to 100KHz
	3. Send at least 74 clock with CS inactive
	4. Send CMD0		; Goto idle state(CRC)
	5. Send CMD8		; Check operating voltage(CRC, SDC v2)
	6. Send ACMD41		; ACMDn -> CMD55 followed by CMDn
		6.1 Send CMD55	; Application CMD(meaning next CMD is ACMDn)
		6.2 Send ACMD41	; Start Initialization(SDC)
	7. Send CMD58		; Read OCR
	8. Send CMD16		; Set block length
	9. Set clock to 25MHz
*/


#define CLK_100KHZ_COUNT 250
#define TM_1MS_COUNT	50000
#define DUMMY_CLOCK_COUNT 74
#define SIZE_1_BYTE		8
#define SIZE_5_BYTE		40

module sdspi {
	reg clk_cnt[8] = 0;
	reg clk_100khz = 0;
	reg clk_25mhz = 0;
	reg clk_prev_100khz = 0;
	reg clk_prev_25mhz = 0;
	reg clk_prev_m_clock = 0;
	wire clk_prev;
	wire clk;
	func_self falling_edge();
	func_self rising_edge();
	reg miso_r = 1;
	wire miso;
	proc_name init();
	proc_name idle();
	reg cmd_buf[48];
	reg response_size[6];
	reg response_buf[40];
	proc_name send_cmd(cmd_buf, response_size);
	proc_name receive_response(response_buf, response_size);
	reg read_data_block[4096] = -1;
	reg write_data_block[4096] = -1;
	reg debug_state[8] = 0;
	reg debug_x[8] = 0;

	wire response_upper[32];
	wire response_lower[32];
	operation_t reg operation = 0;
	reg operation_adrs[32] = 0;
	status_t reg status = 0;

	clk = if(status.inited) clk_25mhz else clk_100khz;
	clk_prev = if(status.inited) clk_prev_25mhz else clk_prev_100khz;
	miso = if(status.inited) MISO else miso_r;
	if(((((clk_cnt == CLK_100KHZ_COUNT)) && ~clk && ~~clk_prev) && ~status.inited) || (clk && ~clk_prev && status.inited)) {
		rising_edge();
	}
	if(((((clk_cnt == CLK_100KHZ_COUNT)) && ~~clk && ~clk_prev) && ~status.inited) || (~clk && clk_prev && status.inited)) {
		falling_edge();
	}
	/*
	if(rising_edge) {
		miso_r := MISO;
	}
	*/
	if((clk_cnt == CLK_100KHZ_COUNT) && ~status.inited) {
		miso_r := MISO;
	} else if(status.inited) {
		miso_r := MISO;
	}
	if(clk_cnt == CLK_100KHZ_COUNT) {
		clk_cnt := 0;
		clk_100khz := ~clk_100khz;
		clk_prev_100khz := clk_100khz;
	} else {
		clk_cnt++;
	}
	clk_25mhz := ~clk_25mhz;
	clk_prev_25mhz := clk_25mhz;

	func reset {
		status.inited := 0;
		init();
	}
	proc init {
		state_name poweron, dummy_clock, recv_cmd0_resp, recv_cmd8_resp, recv_acmd41_0_resp, recv_acmd41_1_resp, recv_cmd16_resp;

		state poweron {
			reg poweron_cnt[16] = 0;

			if(poweron_cnt == TM_1MS_COUNT) {
				if(rising_edge) {
					poweron_cnt := 0;
					debug_state := 1;
					goto dummy_clock;
				}
			} else {
				poweron_cnt++;
			}
			CS = HIGH;
			SCLK = LOW;
			MOSI = HIGH;
		}
		state dummy_clock {
			reg dummy_clock_cnt[7] = 0;

			if(rising_edge) {
				if(dummy_clock_cnt == DUMMY_CLOCK_COUNT) {
					dummy_clock_cnt := 0;
					debug_state := 2;
					send_cmd(CMD0, SIZE_1_BYTE);
					goto recv_cmd0_resp;
				} else {
					dummy_clock_cnt++;
				}
			}
			CS = HIGH;
			SCLK = clk;
			MOSI = HIGH;
		}
		state recv_cmd0_resp {
			if(rising_edge) {
				send_cmd(CMD8, SIZE_5_BYTE);
				goto recv_cmd8_resp;
				debug_state := 3;
			}
			CS = HIGH;
			SCLK = clk;
			MOSI = HIGH;
		}
		state recv_cmd8_resp {
			if(rising_edge) {
				debug_state := 4;
				send_cmd(CMD55, SIZE_1_BYTE);
				goto recv_acmd41_0_resp;
			}
			CS = HIGH;
			SCLK = clk;
			MOSI = HIGH;
		}
		state recv_acmd41_0_resp {
			if(rising_edge) {
				debug_state := 5;
				if(response_buf[7:0] != 0x01) {
					send_cmd(CMD55, SIZE_1_BYTE);
					goto recv_acmd41_0_resp;
				} else {
					send_cmd(CMD41, SIZE_1_BYTE);
					goto recv_acmd41_1_resp;
				}
			}
			CS = HIGH;
			SCLK = clk;
			MOSI = HIGH;
		}
		state recv_acmd41_1_resp {
			if(rising_edge) {
				debug_state := 6;
				if(response_buf[7:0] != 0x00) {
					send_cmd(CMD55, SIZE_1_BYTE);
					goto recv_acmd41_0_resp;
				} else {
					send_cmd(CMD16, SIZE_1_BYTE);
					goto recv_cmd16_resp;
				}
			}
			CS = HIGH;
			SCLK = clk;
			MOSI = HIGH;
		}
		state recv_cmd16_resp {
			if(rising_edge) {
				debug_state := 7;
				goto poweron;
				idle();
			}
			CS = HIGH;
			SCLK = clk;
			MOSI = HIGH;
		}
	}
	proc send_cmd {
		reg cmd_buf_bit_pos[7] = 48;

		if(rising_edge) {
			if((cmd_buf_bit_pos-1) == 0) {
				cmd_buf_bit_pos := 48;
				receive_response(0xffffffffff, response_size);
			} else {
				cmd_buf_bit_pos--;
			}
		}
		/*
		if(falling_edge) {
			if((cmd_buf_bit_pos-1) != 0) {
			}
		}
		*/
		CS = LOW;
		SCLK = clk;
		MOSI = cmd_buf[cmd_buf_bit_pos-1];
	}
	proc receive_response {
		reg response_buf_bit_pos[6] = 0;
		state_name receive_start_bit, receive_response_body;
		
		state receive_start_bit {
			if(miso == LOW) {
				if(rising_edge) {
					response_buf := {response_buf[38:0], miso};
					response_buf_bit_pos++;
					goto receive_response_body;
				}
			}
		}
		state receive_response_body {
			if(rising_edge) {
				if(response_buf_bit_pos == (response_size-1)) {
					response_buf_bit_pos := 0;
					if(!status.inited) {
						init();
					} else {
						idle();
					}
					goto receive_start_bit;
				} else {
					response_buf_bit_pos++;
				}
				response_buf := {response_buf[38:0], miso};
			}
		}
		CS = LOW;
		SCLK = clk;
		MOSI = HIGH;
	}
	proc idle {
		state_name s0, s1, dummy;
		state_name recv_cmd17_resp, recv_data_packet_start_byte, recv_data_packet_data_block, recv_data_packet_crc;
		state_name recv_cmd24_resp, send_data_packet_start_byte, send_data_packet_data_block, send_data_packet_crc, recv_data_resp;
		reg start_byte_buf[8] = 0;
		reg start_byte[8] = 0xfe;
		reg crc[16] = 0;

		status.inited := HIGH;

		state s0 {
			reg s0_cnt[8] = 0;
			/* change 100khz to 25MHz, sync to rising_edge */
			if(rising_edge) {
				if(s0_cnt == 0xff) {
					s0_cnt := 0;
					goto s1;
				} else {
					s0_cnt++;
				}
			}
			CS = HIGH;
			SCLK = LOW;
			MOSI = HIGH;
			debug_state := 8;
		}
		state s1 {
			if(operation.read) {
				if(rising_edge) {
					send_cmd((CMD17|{0x00, operation_adrs, 0x00}), SIZE_1_BYTE);
					goto recv_cmd17_resp;
				}
				status.idle := LOW;
			} else if(operation.write) {
				if(rising_edge) {
					send_cmd((CMD24|{0x00, operation_adrs, 0x00}), SIZE_1_BYTE);
					goto recv_cmd24_resp;
				}
				status.idle := LOW;
			} else {
				status.idle := HIGH;
			}
			CS = HIGH;
			SCLK = clk;
			MOSI = HIGH;
			debug_state := 9;
		}
		state recv_cmd17_resp {
			if(rising_edge) {
				if(response_buf[7:0] == 0x00) {
					start_byte_buf := {start_byte_buf[6:0], miso};
					goto recv_data_packet_start_byte;
				} else {
					status.error := HIGH;
					goto s1;
				}
			}
			CS = HIGH;
			SCLK = clk;
			MOSI = HIGH;
			debug_state := 10;
		}
		state recv_data_packet_start_byte {
			if(rising_edge) {
				if({start_byte_buf[6:0], miso} == start_byte) {
					start_byte_buf := 0;
					goto recv_data_packet_data_block;
				} else {
					start_byte_buf := {start_byte_buf[6:0], miso};
				}
			}
			CS = LOW;
			SCLK = clk;
			MOSI = HIGH;
			debug_state := 11;
		}
		state recv_data_packet_data_block {
			reg data_block_bit_pos[13] = 0;

			if(rising_edge) {
				if(data_block_bit_pos == (4096-1)) {
					//valid({data_block[4094:0], miso});
					data_block_bit_pos := 0;
					goto recv_data_packet_crc;
				} else {
					data_block_bit_pos++;
				}
				read_data_block := {read_data_block[4094:0], miso};
			}
			operation.read := LOW;
			CS = LOW;
			SCLK = clk;
			MOSI = HIGH;
			debug_state := 12;
		}
		state recv_data_packet_crc {
			reg crc_bit_pos[4] = 0;

			if(rising_edge) {
				if(crc_bit_pos == (16-1)) {
					crc_bit_pos := 0;
					goto dummy;
				} else {
					crc_bit_pos++;
				}
				crc := {crc[14:0], miso};
			}
			CS = LOW;
			SCLK = clk;
			MOSI = HIGH;
			debug_state := 13;
		}
		state dummy {
			if(rising_edge) {
				goto s1;
			}
			CS = LOW;
			SCLK = clk;
			MOSI = HIGH;
			debug_state := 14;
			debug_x := 0x80;
		}
		state recv_cmd24_resp {
			if(rising_edge) {
				if(response_buf[7:0] == 0x00) {
					goto send_data_packet_start_byte;
				} else {
					status.error := HIGH;
					goto s1;
				}
			}
			CS = HIGH;
			SCLK = clk;
			MOSI = HIGH;
			debug_state := 15;
		}
		state send_data_packet_start_byte {
			reg start_byte_send_bit_pos[3] = 7;

			if(rising_edge) {
				if(start_byte_send_bit_pos == 0) {
					start_byte_send_bit_pos := 7;
					goto send_data_packet_data_block;
				} else {
					start_byte_send_bit_pos--;
				}
			}
			CS = LOW;
			SCLK = clk;
			MOSI = start_byte[start_byte_send_bit_pos];
			debug_state := 16;
		}
		state send_data_packet_data_block {
			reg write_data_block_bit_pos[12] = 4095;
			
			if(rising_edge) {
				if(write_data_block_bit_pos == 0) {
					write_data_block_bit_pos := 4095;
					goto send_data_packet_crc;
				} else {
					write_data_block_bit_pos--;
				}
			}
			CS = LOW;
			SCLK = clk;
			MOSI = write_data_block[write_data_block_bit_pos];
			debug_state := 17;
		}
		state send_data_packet_crc {
			reg crc_send_bit_pos[4] = 15;
			
			if(rising_edge) {
				if(crc_send_bit_pos == 0) {
					crc_send_bit_pos := 15;
					goto recv_data_resp;
				} else {
					crc_send_bit_pos--;
				}
			}
			CS = LOW;
			SCLK = clk;
			MOSI = 1'b0;
			debug_state := 18;
		}
		state recv_data_resp {
			reg data_resp_bit_pos[3] = 7;
			reg data_resp[8] = -1;

			if(rising_edge) {
				if(data_resp_bit_pos == 0) {
					if(data_resp != 0x00) {
						status.error := HIGH;
					}
					data_resp_bit_pos := 7;
					goto s1;
				} else {
					data_resp_bit_pos--;
				}
				data_resp := {data_resp[6:0], miso};	
			}
			CS = LOW;
			SCLK = clk;
			MOSI = HIGH;
			debug_state := 19;
			operation.write := LOW;
		}
	}
	func read {
		wire read_data[32];

		response_lower = response_buf[31:0];
		response_upper = {0x000000, response_buf[39:32]};
		any {
			read_adrs == 12'(0x0): {read_data = read_data_block[4095:4064]; valid();}
			read_adrs == 12'(0x4): {read_data = read_data_block[4063:4032]; valid();}
			read_adrs == 12'(0x8): {read_data = read_data_block[4031:4000]; valid();}
			read_adrs == 12'(0xc): {read_data = read_data_block[3999:3968]; valid();}
			read_adrs == 12'(0x10): {read_data = read_data_block[3967:3936]; valid();}
			read_adrs == 12'(0x14): {read_data = read_data_block[3935:3904]; valid();}
			read_adrs == 12'(0x18): {read_data = read_data_block[3903:3872]; valid();}
			read_adrs == 12'(0x1c): {read_data = read_data_block[3871:3840]; valid();}
			read_adrs == 12'(0x20): {read_data = read_data_block[3839:3808]; valid();}
			read_adrs == 12'(0x24): {read_data = read_data_block[3807:3776]; valid();}
			read_adrs == 12'(0x28): {read_data = read_data_block[3775:3744]; valid();}
			read_adrs == 12'(0x2c): {read_data = read_data_block[3743:3712]; valid();}
			read_adrs == 12'(0x30): {read_data = read_data_block[3711:3680]; valid();}
			read_adrs == 12'(0x34): {read_data = read_data_block[3679:3648]; valid();}
			read_adrs == 12'(0x38): {read_data = read_data_block[3647:3616]; valid();}
			read_adrs == 12'(0x3c): {read_data = read_data_block[3615:3584]; valid();}
			read_adrs == 12'(0x40): {read_data = read_data_block[3583:3552]; valid();}
			read_adrs == 12'(0x44): {read_data = read_data_block[3551:3520]; valid();}
			read_adrs == 12'(0x48): {read_data = read_data_block[3519:3488]; valid();}
			read_adrs == 12'(0x4c): {read_data = read_data_block[3487:3456]; valid();}
			read_adrs == 12'(0x50): {read_data = read_data_block[3455:3424]; valid();}
			read_adrs == 12'(0x54): {read_data = read_data_block[3423:3392]; valid();}
			read_adrs == 12'(0x58): {read_data = read_data_block[3391:3360]; valid();}
			read_adrs == 12'(0x5c): {read_data = read_data_block[3359:3328]; valid();}
			read_adrs == 12'(0x60): {read_data = read_data_block[3327:3296]; valid();}
			read_adrs == 12'(0x64): {read_data = read_data_block[3295:3264]; valid();}
			read_adrs == 12'(0x68): {read_data = read_data_block[3263:3232]; valid();}
			read_adrs == 12'(0x6c): {read_data = read_data_block[3231:3200]; valid();}
			read_adrs == 12'(0x70): {read_data = read_data_block[3199:3168]; valid();}
			read_adrs == 12'(0x74): {read_data = read_data_block[3167:3136]; valid();}
			read_adrs == 12'(0x78): {read_data = read_data_block[3135:3104]; valid();}
			read_adrs == 12'(0x7c): {read_data = read_data_block[3103:3072]; valid();}
			read_adrs == 12'(0x80): {read_data = read_data_block[3071:3040]; valid();}
			read_adrs == 12'(0x84): {read_data = read_data_block[3039:3008]; valid();}
			read_adrs == 12'(0x88): {read_data = read_data_block[3007:2976]; valid();}
			read_adrs == 12'(0x8c): {read_data = read_data_block[2975:2944]; valid();}
			read_adrs == 12'(0x90): {read_data = read_data_block[2943:2912]; valid();}
			read_adrs == 12'(0x94): {read_data = read_data_block[2911:2880]; valid();}
			read_adrs == 12'(0x98): {read_data = read_data_block[2879:2848]; valid();}
			read_adrs == 12'(0x9c): {read_data = read_data_block[2847:2816]; valid();}
			read_adrs == 12'(0xa0): {read_data = read_data_block[2815:2784]; valid();}
			read_adrs == 12'(0xa4): {read_data = read_data_block[2783:2752]; valid();}
			read_adrs == 12'(0xa8): {read_data = read_data_block[2751:2720]; valid();}
			read_adrs == 12'(0xac): {read_data = read_data_block[2719:2688]; valid();}
			read_adrs == 12'(0xb0): {read_data = read_data_block[2687:2656]; valid();}
			read_adrs == 12'(0xb4): {read_data = read_data_block[2655:2624]; valid();}
			read_adrs == 12'(0xb8): {read_data = read_data_block[2623:2592]; valid();}
			read_adrs == 12'(0xbc): {read_data = read_data_block[2591:2560]; valid();}
			read_adrs == 12'(0xc0): {read_data = read_data_block[2559:2528]; valid();}
			read_adrs == 12'(0xc4): {read_data = read_data_block[2527:2496]; valid();}
			read_adrs == 12'(0xc8): {read_data = read_data_block[2495:2464]; valid();}
			read_adrs == 12'(0xcc): {read_data = read_data_block[2463:2432]; valid();}
			read_adrs == 12'(0xd0): {read_data = read_data_block[2431:2400]; valid();}
			read_adrs == 12'(0xd4): {read_data = read_data_block[2399:2368]; valid();}
			read_adrs == 12'(0xd8): {read_data = read_data_block[2367:2336]; valid();}
			read_adrs == 12'(0xdc): {read_data = read_data_block[2335:2304]; valid();}
			read_adrs == 12'(0xe0): {read_data = read_data_block[2303:2272]; valid();}
			read_adrs == 12'(0xe4): {read_data = read_data_block[2271:2240]; valid();}
			read_adrs == 12'(0xe8): {read_data = read_data_block[2239:2208]; valid();}
			read_adrs == 12'(0xec): {read_data = read_data_block[2207:2176]; valid();}
			read_adrs == 12'(0xf0): {read_data = read_data_block[2175:2144]; valid();}
			read_adrs == 12'(0xf4): {read_data = read_data_block[2143:2112]; valid();}
			read_adrs == 12'(0xf8): {read_data = read_data_block[2111:2080]; valid();}
			read_adrs == 12'(0xfc): {read_data = read_data_block[2079:2048]; valid();}
			read_adrs == 12'(0x100): {read_data = read_data_block[2047:2016]; valid();}
			read_adrs == 12'(0x104): {read_data = read_data_block[2015:1984]; valid();}
			read_adrs == 12'(0x108): {read_data = read_data_block[1983:1952]; valid();}
			read_adrs == 12'(0x10c): {read_data = read_data_block[1951:1920]; valid();}
			read_adrs == 12'(0x110): {read_data = read_data_block[1919:1888]; valid();}
			read_adrs == 12'(0x114): {read_data = read_data_block[1887:1856]; valid();}
			read_adrs == 12'(0x118): {read_data = read_data_block[1855:1824]; valid();}
			read_adrs == 12'(0x11c): {read_data = read_data_block[1823:1792]; valid();}
			read_adrs == 12'(0x120): {read_data = read_data_block[1791:1760]; valid();}
			read_adrs == 12'(0x124): {read_data = read_data_block[1759:1728]; valid();}
			read_adrs == 12'(0x128): {read_data = read_data_block[1727:1696]; valid();}
			read_adrs == 12'(0x12c): {read_data = read_data_block[1695:1664]; valid();}
			read_adrs == 12'(0x130): {read_data = read_data_block[1663:1632]; valid();}
			read_adrs == 12'(0x134): {read_data = read_data_block[1631:1600]; valid();}
			read_adrs == 12'(0x138): {read_data = read_data_block[1599:1568]; valid();}
			read_adrs == 12'(0x13c): {read_data = read_data_block[1567:1536]; valid();}
			read_adrs == 12'(0x140): {read_data = read_data_block[1535:1504]; valid();}
			read_adrs == 12'(0x144): {read_data = read_data_block[1503:1472]; valid();}
			read_adrs == 12'(0x148): {read_data = read_data_block[1471:1440]; valid();}
			read_adrs == 12'(0x14c): {read_data = read_data_block[1439:1408]; valid();}
			read_adrs == 12'(0x150): {read_data = read_data_block[1407:1376]; valid();}
			read_adrs == 12'(0x154): {read_data = read_data_block[1375:1344]; valid();}
			read_adrs == 12'(0x158): {read_data = read_data_block[1343:1312]; valid();}
			read_adrs == 12'(0x15c): {read_data = read_data_block[1311:1280]; valid();}
			read_adrs == 12'(0x160): {read_data = read_data_block[1279:1248]; valid();}
			read_adrs == 12'(0x164): {read_data = read_data_block[1247:1216]; valid();}
			read_adrs == 12'(0x168): {read_data = read_data_block[1215:1184]; valid();}
			read_adrs == 12'(0x16c): {read_data = read_data_block[1183:1152]; valid();}
			read_adrs == 12'(0x170): {read_data = read_data_block[1151:1120]; valid();}
			read_adrs == 12'(0x174): {read_data = read_data_block[1119:1088]; valid();}
			read_adrs == 12'(0x178): {read_data = read_data_block[1087:1056]; valid();}
			read_adrs == 12'(0x17c): {read_data = read_data_block[1055:1024]; valid();}
			read_adrs == 12'(0x180): {read_data = read_data_block[1023:992]; valid();}
			read_adrs == 12'(0x184): {read_data = read_data_block[991:960]; valid();}
			read_adrs == 12'(0x188): {read_data = read_data_block[959:928]; valid();}
			read_adrs == 12'(0x18c): {read_data = read_data_block[927:896]; valid();}
			read_adrs == 12'(0x190): {read_data = read_data_block[895:864]; valid();}
			read_adrs == 12'(0x194): {read_data = read_data_block[863:832]; valid();}
			read_adrs == 12'(0x198): {read_data = read_data_block[831:800]; valid();}
			read_adrs == 12'(0x19c): {read_data = read_data_block[799:768]; valid();}
			read_adrs == 12'(0x1a0): {read_data = read_data_block[767:736]; valid();}
			read_adrs == 12'(0x1a4): {read_data = read_data_block[735:704]; valid();}
			read_adrs == 12'(0x1a8): {read_data = read_data_block[703:672]; valid();}
			read_adrs == 12'(0x1ac): {read_data = read_data_block[671:640]; valid();}
			read_adrs == 12'(0x1b0): {read_data = read_data_block[639:608]; valid();}
			read_adrs == 12'(0x1b4): {read_data = read_data_block[607:576]; valid();}
			read_adrs == 12'(0x1b8): {read_data = read_data_block[575:544]; valid();}
			read_adrs == 12'(0x1bc): {read_data = read_data_block[543:512]; valid();}
			read_adrs == 12'(0x1c0): {read_data = read_data_block[511:480]; valid();}
			read_adrs == 12'(0x1c4): {read_data = read_data_block[479:448]; valid();}
			read_adrs == 12'(0x1c8): {read_data = read_data_block[447:416]; valid();}
			read_adrs == 12'(0x1cc): {read_data = read_data_block[415:384]; valid();}
			read_adrs == 12'(0x1d0): {read_data = read_data_block[383:352]; valid();}
			read_adrs == 12'(0x1d4): {read_data = read_data_block[351:320]; valid();}
			read_adrs == 12'(0x1d8): {read_data = read_data_block[319:288]; valid();}
			read_adrs == 12'(0x1dc): {read_data = read_data_block[287:256]; valid();}
			read_adrs == 12'(0x1e0): {read_data = read_data_block[255:224]; valid();}
			read_adrs == 12'(0x1e4): {read_data = read_data_block[223:192]; valid();}
			read_adrs == 12'(0x1e8): {read_data = read_data_block[191:160]; valid();}
			read_adrs == 12'(0x1ec): {read_data = read_data_block[159:128]; valid();}
			read_adrs == 12'(0x1f0): {read_data = read_data_block[127:96]; valid();}
			read_adrs == 12'(0x1f4): {read_data = read_data_block[95:64]; valid();}
			read_adrs == 12'(0x1f8): {read_data = read_data_block[63:32]; valid();}
			read_adrs == 12'(0x1fc): {read_data = read_data_block[31:0]; valid();}
			read_adrs == 12'(0x200): {read_data = 32'(status); valid();}
			read_adrs == 12'(0x204): {read_data = response_lower; valid();}
			read_adrs == 12'(0x208): {read_data = response_upper; valid();}
			read_adrs == 12'(0x20c): {read_data = status; valid();}
			read_adrs == 12'(0x210): {read_data = operation; valid();}
			read_adrs == 12'(0x214): {read_data = operation_adrs; valid();}
			else: load_access_fault();
		}
		any {
			(byteen == MEM_WORD):							rdata = read_data;
			(byteen == MEM_HALFWORD && ~read_adrs[1]):			rdata = {0x0000, read_data[15:0]};
			(byteen == MEM_HALFWORD && read_adrs[1]):			rdata = {0x0000, read_data[31:16]};
			(byteen == MEM_BYTE && (read_adrs[1:0] == 2'b00)):	rdata = {0x000000, read_data[7:0]};
			(byteen == MEM_BYTE && (read_adrs[1:0] == 2'b01)):	rdata = {0x000000, read_data[15:8]};
			(byteen == MEM_BYTE && (read_adrs[1:0] == 2'b10)):	rdata = {0x000000, read_data[23:16]};
			(byteen == MEM_BYTE && (read_adrs[1:0] == 2'b11)):	rdata = {0x000000, read_data[31:24]};
		}
	}
	func write {
		variable new_data[32];
		wire old_data[32];

		any {
			write_adrs == 12'(0x200): {old_data = status; status.error := wdata[3]; valid();}
			write_adrs == 12'(0x210): {old_data = operation; operation := wdata; valid();}
			//write_adrs == 12'(0x214): {old_data = operation_adrs; operation_adrs := new_data; valid();}
			write_adrs == 12'(0x214): {old_data = operation_adrs; operation_adrs := wdata; valid();}
			else: store_amo_access_fault();
		}
		/*
		any {
			(byteen == MEM_WORD):							{new_data[31:0] = wdata;}
			(byteen == MEM_HALFWORD && ~write_adrs[1]):			{new_data[31:16] = old_data[31:16]; new_data[15:0] = wdata[15:0];}
			(byteen == MEM_HALFWORD && write_adrs[1]):			{new_data[31:16] = wdata[15:0]; new_data[15:0] = old_data[15:0];}
			(byteen == MEM_BYTE && (write_adrs[1:0] == 2'b00)):	{new_data[31:8] = old_data[31:8]; new_data[7:0] = wdata[7:0];}
			(byteen == MEM_BYTE && (write_adrs[1:0] == 2'b01)):	{new_data[31:16] = old_data[31:16]; new_data[15:8] = wdata[7:0]; new_data[7:0] = old_data[7:0];}
			(byteen == MEM_BYTE && (write_adrs[1:0] == 2'b10)):	{new_data[31:24] = old_data[31:24]; new_data[23:16] = wdata[7:0]; new_data[15:0] = old_data[15:0];}
			(byteen == MEM_BYTE && (write_adrs[1:0] == 2'b11)):	{new_data[31:24] = wdata[7:0]; new_data[23:0] = old_data[23:0];}
		}
		*/
	}
	debug_status = debug_state | debug_x;
	debug_inited = status.inited;
	debug_sign = read_data_block[15:0];
}
